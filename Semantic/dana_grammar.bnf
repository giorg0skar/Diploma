<program>       ::= <func_def>
<func_def>      ::= "def" <header> {<local_def>} <block>
<header>        ::= <id> " " ["is" <data_type>] [":" <fpar_def> ("," <fpar_def>)* ]
<fpar_def>      ::= <id> {<id>} "as" <fpar_type>
<data_type>     ::= "int" | "byte"
<type>          ::= <data_type> { "[" <number> "]" }
<fpar_type>     ::= <type> | "ref" <data_type> | <data_type> "[" "]" { "[" <number> "]" }
<local_def>     ::= <func_def> | <func_decl> | <var_def>
<func_decl>     ::= "decl" <header>
<var_def>       ::= "var" <id> {<id>} "is" <type>
<stmt>          ::= "skip" | <l_value> ":=" <expr> | <proc_call> | "exit"
                | "return" ":" <expr> | "if" <cond> ":" <block> {"elif" <cond> ":" <block> } ["else" ":" <block>]
                | "loop" [<id>] ":" <block> | "break" [":" <id>] | "continue" [":" <id>]
<block>         ::= "begin" <stmt> {<stmt>} "end" | <stmt> {<stmt>} "end"
<proc_call>     ::= <id> [":" <expr> { "," <expr> } ]
<func_call>     ::= <id> "(" [<expr> { "," <expr> } ] ")"
<l_value>       ::= <id> | <string> | <l_value> "[" <expr> "]"
<expr>          ::= <number> | <alpha> | <l_value> | "(" <expr> ")" | <func_call>
                |   ("+" | "-") <expr> | <expr> ("+" | "-" | "*" | "/" | "%") <expr>
                |   "true" | "false" | "!" <expr> | <expr> ("&" | "|") <expr>
<cond>          ::= <expr> | "(" <cond> ")" | "not" <cond> | <cond> ("and" | "or") <expr>
                |   <expr> ("=" | "<>" | "<" | ">" | "<=" | ">=") <expr>
<string>    ::= "\"" <alphas> "\""
<alphas>    ::= <alpha> [<alphas>]
<number>    ::= <digit> [<number>]
<alpha>	    ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
<digit>     ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9